// 함수: 코드를 관리하는 요소
// 개발자가 필요할 때 함수가 관리하는 코드를 동작시킬 수 있음.
// 함수가 관리하는 코드를 동작시키기 위해 명령하는 것을 함수를 호출한다라고 부름.

// 코드는 항상 위에서 아래로.
// 코드가 흘러가다가 함수를 호출 -> 코드의 흐름이 함수쪽으로 이동,
// 함수 내부의 코드가 위에서 아래로 모두 수행되면 코드의 흐름이 함수를 호출한 쪽으로 돌아옴.

// 함수의 사용
// 1. 프로그램에서 자주 사용하는 코드가 있다면 함수로 만들어서 사용.
// 2. 프로그램을 구성하는 다양한 기능들을 각각 함수로 만들어서 관리.

fun main() {
    println("main의 코드가 수행 중입니다. ")
    test1()

    println("main의 코드가 수행 중입니다. ")

    // 매개변수 가지고 있는 함수 호출
    var k1 = 200
    var k2 = 44.44

    test2(k1, k2)
    // 변수 넣었을 때는 표시 안함.

    test2(100, 55.55)
    test2(200, 66.666)
    // 상수를 넣었을 때 매개변수 표시.
    test2(a2 = 77.77, a1 = 300)
    // 이렇게 작성 할 일 없음. 뒤에서 쓰는 이유 나옴.
    // 함수를 호출할 때 전달하는 값을 어떤 매개변수에 저장할지 정할 수 있음.
    // 첫 번째 값은 a2를 지정했기 때문에 두 번째 매개변수인 a2에 첫 번째 값이 저장됨.
    // 두 번째 값은 a1을 지정했기 때문에 첫 번째 매개변수인 a1에 두 번째 값이 저장됨.

    // 전달하는 값과 매개변수의 타입이 맞지 않는 경우 - 오류 발생
    // test2(33.33, 33.33)

    // 전달하는 값의 개수와 매개변수의 값이 다를 경우 - 오류 발생
    // 아래 코드는 함수가 가지고 있는 매개변수의 개수보다 더 적은 값을 전달해서가 아닌
    // 매개변수에 저장될 값이 모두 결정되지 않았기에 오류 발생.
    // test2(500)
    // 매개변수의 개수보다 더 많이 전달했기에 오류 발생.
    // test2(600, 66.66, true)

    // 매개변수에 기본값이 설정되어 있는 test3 함수 호출.
    // a2, a3에는 기본값이 설정되어 있지만 함수 호출 시 값을 전달하고 있기에
    // 기본값은 무시되고 전달해주는 값이 저장됨.
    test3(200, 22.22, "새로운 문자열")
    // a2, a3에 저장된 값을 전달하지 않았으므로 기본값이 a2와 a3에 저장됨.
    test3(500)
    // 만약 기본값을 저장하고 싶은 매개변수가 중간에 있다면
    test3(400, a3="totofhsadbgskbd")

    test4()

    // 반환값을 전달하는 함수 test5 호출.
    // 함수가 전달하는 반환값은 바로 변수에 저장해주면 됨
    var r100 = test5(100, 200)
    println("r100 : $r100")

    // 정수값을 받는 함수 호출
    var r200 = add(100, 200)
    println("r200 : $r200")

    // 실수값을 받는 함수 호출
    var r300 = add(11.11, 22.22)
    println("r300 : $r300")
}

// 기본 함수
fun test1() {
    println("test1 함수 호출하겠습니다.")
    println("test1 함수 내부의 코드가 끝났습니다.")
}


// 함수의 매개변수
// 함수 내부의 코드가 수행되기 위해 필요한 데이터 중
// 함수를 호출하는 쪽에서 데이터를 가지고 있다면
// 함수를 호출할 때 전달할 수 있고 전달된 값은 매개변수에 담기게 됨.
fun test2(a1: Int, a2: Double) {
    println("test2 함수 호출하겠습니다.")
    println("a1: $a1")
    println("a2: $a2")
}

// 기본값을 가지고 있는 매개변수
// 매개변수에 기본값이 설정되어 있는 경우
// 매개벼수에 저장될 값이 전달되지 않으면 기본값이 저장됨.
// 만약 기본값이 설정되어 있지 않는 매개변수가 있다면
// 함수 호출시 무조건 값을 전달해줘야 함.
fun test3(a1: Int, a2: Double = 11.11, a3: String = "기본 문자열") {
    println("test3 함수 호출하겠습니다.")
    println("a1: $a1")
    println("a2: $a2")
    println("a3: $a3")
}

fun test4() {
    println("test4 함수 호출하겠습니다. ")
    // 함수 내부에 코드가 더 있다 하더라도
    // 함수의 수행을 끝내고 함수를 호출한 쪽으로 되돌아가라는 명령어
    return
    // 데이터의 무결성 보장.
    // 개발자가 만든 코드가 비정상적으로 동작할 상황이라면
    // 코드가 동작되지 않도록 하기 위해 사용.
    println("이 부분이 호출이 될까요?")
    // main으로 되돌아가기 때문에 이 부분 출력 안됨.
}

// return 을 만나게 되면 함수의 수행 종료됨.
// 이 때, 함수를 호출한 쪽으로 값을 전달할 수 있음.
// 이렇게 전달되는 값을 반환값.

// 반환값 있을 경우 -> 반환값의 타입을 명시해줘야 함.
fun test5(a1: Int, a2: Int): Int {
    var r1 = a1 + a2

    // 함수의 수행을 종료하고 값을 반환함.
    return r1
}

// 함수의 overloading : 매개변수의 행태(타입이나 개수)를 다르게하여
// 같은 이름의 함수를 다수 만들 수 있는 개념. 구분은 할 수 있어야 하므로 매개 변수를 다르게 하는 것.

// 함수 내부의 코드가 같은 작업을 수행하지만 매개변수의 타입이 다르기에
// 함수를 여러개 만들어야 하는 경우 이 개념을 사용하며 개발자는
// 함수의 이름 하나만 알면 되기 때문에 편하게 작업할 수 있음.
fun add(a1: Int, a2: Int) : Int {
    var r1 = a1 + a2
    return r1
}

fun add(a1: Double, a2: Double) : Double {
    var r2 = a1 + a2
    return r2
}
// 개발자에게 편리함을 주기 위해 쓰는 것.
