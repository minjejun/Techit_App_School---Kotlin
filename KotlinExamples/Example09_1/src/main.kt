// 문제 9) 1부터 1씩 증가시키는 값 중 3의 배수이거나 7의 배수인 숫자를 누적함.
// 누적값이 10000이상이 됐을 때의 숫자가 몇인지 출력한다.

// Step 1) 기능 정리

// 1. 1부터 1씩 증갓키면서 3의 배수 or 7의 배수인 숫자를 누적. 이 때, 누적 값이 10000이상이
// 되었을 때 숫자 반환.
// 2. 반환된 숫자 출력.


// Step 2) 각 기능별 함수 구현
// → 아직 함수 내부의 코드는 작성하지 않음.

// Step 3) 각 함수 내부의 코드 구현
//→ 함수 하나의 구현이 끝나면 의도한대로 동작하는지 반드시 테스트 해줌.

// Step 4) 프로그램이 동작하도록 main 함수에서 각 함수들을 순서에 맞게 호출해줌.

fun main() {
    val num = findNum()
    printResult(num)
}

// 1. 1부터 1씩 증갓키면서 3의 배수 or 7의 배수인 숫자를 누적. 이 때, 누적 값이 10000이상이
// 되었을 때 숫자 반환.
fun findNum(): Int {
    var num = 0

    var total = 0

    while(total < 10000) {
        // 숫자를 1 증가시킴
        num++

        // 3의배수 or 7의배수면 누적.
        if (num % 3 == 0 || num % 7 == 0) {
            total += num
        }
    }

    return num
}

// 2. 반환된 숫자 출력.
fun printResult(number: Int) {
    println("찾은 숫자는 ${number}입니다")
}