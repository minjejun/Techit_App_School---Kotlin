// 변수 : 프로그램 실행 중 변화되는 값을 저장하는 기억공간
// 변수의 용도와 크기는 개발자가 자료형을 이용해 결정.
// 변수의 위치는 VM이 알아서 해줌.
// 변수가 생서오디는 위치는 VM 알아서 정해줘서 개발자가 변수가 어디있는지 알 수 없음.
// 이에, 변수의 접근 위해 변수의 이름 사용
// 변수의 이름은 개발자가 정하고, 개발자는 변수 이름을 통해 변수에 접근하여 변수에 값을 저장하거나
// 가져다 사용할 수 있음.

// 식별자
// 변수, 함수, 클래스, 메소드와 같이 개발자가 정의해서 사용하는 요소들을
// 구분하기 위해 지어주는 이름
// 식별자 규칙은 자바와 같음.

// 규칙
// 1. 길이 제한 없음
// 2. 첫 글자는 무조건 문자, _, $ 만 가능. ($는 다른 곳에서 의미가 있을 수 있기에
// 사용하는 것 지양.
// 3. 두 번째 글자부터는 문자, 숫자, _, $를 사용할 수 있음.
// 4. 자바언어에서 식별자를 한글로 지어주는 것이 허용됨. 그래서 코틀린도 사용해도 되지만,
// 그냥 한글은 사용하지 않는 것이 좋음. 영어를 잘 쓰자.

// 권장 사항
// 1. 변수의 이름은 첫 글자를 소문자로 함
// 2. 함수나 메소드의 이름은 첫 글자를 소문자로 함
// 3. 클래스 이름은 첫 글자를 대문자로 함
// 4. 상수를 의미하는 것들은 모두 대문자로 함.

// 표기 기법
// 1. 잘못된 표기 예
// koreanpointaverage - 여러 단어를 조합했지만 가독성 떨어짐.
// korean point average - 문법 오류. 이름은 띄어쓰기를 지원 안함.
// 2. 파스칼 표기 기법
// 단어와 단어 사이에 언더바를 두는 표기 기법
// korean_point_average
// car_count
// 3. 카멜 표기 기법
// 각 단어의 첫 글자를 대문자로 작성하는 표기 기법
// koreanPointAverage
// carCount
// 자바에서는 카멜 표기 기법을 주로 사용.

fun main() {
    // 변수를 정의
    // val / var 변수의 이름 : 자료형
    var a1 : Int

    // 변수에 값을 저장한다.
    // 변수에는 값 하나만 저장할 수 있다.
    // 값을 다시 저장하면 기존의 저장된 값을 삭제되어 덮어씌워 진다.
    // = : 대입연산자. 우측의 값을 좌측의 변수에 저장한다.
    a1 = 100
    // 변수의 이름만 작성하면 변수에 저장되어 있는 값을 가져와 사용할 수 있음.
    println("a1 : " + a1)

    // 변수에 새로운 값을 저장하면 기존에 저장되어 있는 값은 소멸됨.
    a1 = 200
    println("a1 : " + a1)

    // 변수에 선언과 동시에 변수에 값 저장할 수 있음. -> 초기화
    var a2 : Int = 300
    println("a2 : " + a2)

    // 변수 선언시 값을 저장할 때는 자료형을 생략해도 된다.
    // 변수에 저장하는 값을 보고 변수의 자료형이 결정된다.
    var a3 = 400
    println("a3 : " + a3)
    println("a3 type : " + a3.javaClass.name)

    var a4 = 11.11
    println("a4 : " + a4)
    println("a4 type : " + a4.javaClass.name)

    // 변수를 선언할 때 저장할 값이 없을 경우 자료형을 생략하면 오류 발생.
    // var a5

    // 자료형이 결정된 변수는 자료형을 변경할 수 없음.
    // a4 = "안녕하세요"

    var a11 : Byte = 100
    var a12 : Short = 200
    var a13 : Int = 300
    var a14 : Long = 400

    var a15 : Double = 11.11
    var a16 : Float = 11.11F

    var a17 : Char = '가'

    var a18 : Boolean = true

    var a19 : String = "문자열 적기"

    println("a11 : " + a11)
    println("a12 : " + a12)
    println("a13 : " + a13)
    println("a14 : " + a14)
    println("a15 : " + a15)
    println("a16 : " + a16)
    println("a17 : " + a17)
    println("a18 : " + a18)
    println("a19 : " + a19)

    // 문자열 결합
    // 문자열 + 문자열 : 문자열 들을 합친 새로운 문자열 만들어짐.
    var a20 = "안녕하세요 " + "반갑습니다"
    println("a20 : " + a20)

    // 문자열 + 문자열이 아닌 것 : 문자열이 아닌 것이 문자열로 변환된 다음 문자열이 합쳐짐.
    var a21 = "저의 나이는 " + 25 + "세 입니다."
    println("a21 : " + a21)

    // ${ } 를 사용하면 + 연산자를 사용할 필요 없음.
    var a22 = "저의 나이는 ${25}세 입니다."
    println("a22 : " + a22)

    // 만약 ${ } 안에 들어가는 것이 변수 하나라면 { } 는 생략 가능.
    var a23 = 25
    var a24 = "나이는 $a23"
    println("a24 : $a24")

    // val 키워드는 변수의 값을 변경할 수 없다. 다른 값이 들어가려고 하면 오류가 남.
    val a25 = 100
    println("a25 : $a25")

    // a25 = 111

}