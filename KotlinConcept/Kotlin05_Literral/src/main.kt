// 리터럴 - 자료형
// 프로그래밍 언어에서 값을 작성하는 문법
// 작성하는 값에 따라서 기억공간의 용도, 크기, 위치가 결정된다.

// 용도 : 저장하는 값을 효율적이고 정상저긍로 유지하기 위한 방법 결정.
// 자료구조에서 정의하는 값 관리 기법을 따름. - 정수, 실수 등등 값의 형태에 따라 관리 방법 다름.
// 크기 : 리터럴인 경우 크기가 정해져 있음.
// 위치 : OS가 비어있는 공간의 위치를 알려주기 때문에 알아서 결정됨.

fun main() {
    // 정수(4byte) - int

    println(100)
    println(2147483647)
    println(-2147483647)

    // 자바의 경우 정수값을 작성하면 4 byte 기억공간이 마련됨
    // 범위를 벗어난 값을 작성하면 오류 발생.
    // 따라서 8byte 기억공간이 만들어질 수 있도록 L을 뒤에 붙혀줘야 함.
    println(2147483648)
    // println(-2147483649)

    // 그런데 코틀린의 경우 L 붙히지 않더라도 작성된 값을 보고
    // Java 코드로 변환될 때 4 byte 면 충분한 경우 정수값 기대로 유지되고
    // 8 byte 기억공간이 필요한 값이라면 뒤에 L 을 붙힌 코드로 변경된다.
    // 즉 코틀린은 정수값을 작성할 때 값의 범위를 보고 뒤에 L 을 붙혀주지 않아도 된다.

    // 정수값을 작성할 때 자릿 구분을 위해 _ 를 사용할 수 있음.
    // _ 를 작성했다고 하더라도 그냥 정수 값임.
    println(123_456_789)

    // 실수(8 byte) - double
    println(11.11)
    // 실수(4 byte) - Float
    println(11.11F)

    // 문자 타입(2 byte ?, 실행되는 시스템에 따라감) - char
    // 내부적으로 정수값으로 관리됨.
    println('A')
    println('가')

    // 문자열 - 작성한 글자 수 만큼 메모리를 사용, 객체라는 것으로 관리.
    println("문자열")

    // 논리 타입 - Boolean
    // 참을 의미
    println(true)
    // 거짓을 의미
    println(false)

    // RawString - 여러 줄의 문자열을 표현할 때 사용.
    println("""
        동해물과 백두산이
        마르고 닳도록
        하느님이 보우하사
        우리나라 만세
    """.trimIndent())
}